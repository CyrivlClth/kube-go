// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/CyrivlClth/kube-go/app/model"
)

func newAppDeploy(db *gorm.DB, opts ...gen.DOOption) appDeploy {
	_appDeploy := appDeploy{}

	_appDeploy.appDeployDo.UseDB(db, opts...)
	_appDeploy.appDeployDo.UseModel(&model.AppDeploy{})

	tableName := _appDeploy.appDeployDo.TableName()
	_appDeploy.ALL = field.NewAsterisk(tableName)
	_appDeploy.AppName = field.NewString(tableName, "app_name")
	_appDeploy.EnvName = field.NewString(tableName, "env_name")
	_appDeploy.Image = field.NewString(tableName, "image")
	_appDeploy.Tag = field.NewString(tableName, "tag")

	_appDeploy.fillFieldMap()

	return _appDeploy
}

type appDeploy struct {
	appDeployDo

	ALL     field.Asterisk
	AppName field.String
	EnvName field.String
	Image   field.String
	Tag     field.String

	fieldMap map[string]field.Expr
}

func (a appDeploy) Table(newTableName string) *appDeploy {
	a.appDeployDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appDeploy) As(alias string) *appDeploy {
	a.appDeployDo.DO = *(a.appDeployDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appDeploy) updateTableName(table string) *appDeploy {
	a.ALL = field.NewAsterisk(table)
	a.AppName = field.NewString(table, "app_name")
	a.EnvName = field.NewString(table, "env_name")
	a.Image = field.NewString(table, "image")
	a.Tag = field.NewString(table, "tag")

	a.fillFieldMap()

	return a
}

func (a *appDeploy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appDeploy) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["app_name"] = a.AppName
	a.fieldMap["env_name"] = a.EnvName
	a.fieldMap["image"] = a.Image
	a.fieldMap["tag"] = a.Tag
}

func (a appDeploy) clone(db *gorm.DB) appDeploy {
	a.appDeployDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appDeploy) replaceDB(db *gorm.DB) appDeploy {
	a.appDeployDo.ReplaceDB(db)
	return a
}

type appDeployDo struct{ gen.DO }

type IAppDeployDo interface {
	gen.SubQuery
	Debug() IAppDeployDo
	WithContext(ctx context.Context) IAppDeployDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppDeployDo
	WriteDB() IAppDeployDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppDeployDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppDeployDo
	Not(conds ...gen.Condition) IAppDeployDo
	Or(conds ...gen.Condition) IAppDeployDo
	Select(conds ...field.Expr) IAppDeployDo
	Where(conds ...gen.Condition) IAppDeployDo
	Order(conds ...field.Expr) IAppDeployDo
	Distinct(cols ...field.Expr) IAppDeployDo
	Omit(cols ...field.Expr) IAppDeployDo
	Join(table schema.Tabler, on ...field.Expr) IAppDeployDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppDeployDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppDeployDo
	Group(cols ...field.Expr) IAppDeployDo
	Having(conds ...gen.Condition) IAppDeployDo
	Limit(limit int) IAppDeployDo
	Offset(offset int) IAppDeployDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppDeployDo
	Unscoped() IAppDeployDo
	Create(values ...*model.AppDeploy) error
	CreateInBatches(values []*model.AppDeploy, batchSize int) error
	Save(values ...*model.AppDeploy) error
	First() (*model.AppDeploy, error)
	Take() (*model.AppDeploy, error)
	Last() (*model.AppDeploy, error)
	Find() ([]*model.AppDeploy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppDeploy, err error)
	FindInBatches(result *[]*model.AppDeploy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppDeploy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppDeployDo
	Assign(attrs ...field.AssignExpr) IAppDeployDo
	Joins(fields ...field.RelationField) IAppDeployDo
	Preload(fields ...field.RelationField) IAppDeployDo
	FirstOrInit() (*model.AppDeploy, error)
	FirstOrCreate() (*model.AppDeploy, error)
	FindByPage(offset int, limit int) (result []*model.AppDeploy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppDeployDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appDeployDo) Debug() IAppDeployDo {
	return a.withDO(a.DO.Debug())
}

func (a appDeployDo) WithContext(ctx context.Context) IAppDeployDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appDeployDo) ReadDB() IAppDeployDo {
	return a.Clauses(dbresolver.Read)
}

func (a appDeployDo) WriteDB() IAppDeployDo {
	return a.Clauses(dbresolver.Write)
}

func (a appDeployDo) Session(config *gorm.Session) IAppDeployDo {
	return a.withDO(a.DO.Session(config))
}

func (a appDeployDo) Clauses(conds ...clause.Expression) IAppDeployDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appDeployDo) Returning(value interface{}, columns ...string) IAppDeployDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appDeployDo) Not(conds ...gen.Condition) IAppDeployDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appDeployDo) Or(conds ...gen.Condition) IAppDeployDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appDeployDo) Select(conds ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appDeployDo) Where(conds ...gen.Condition) IAppDeployDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appDeployDo) Order(conds ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appDeployDo) Distinct(cols ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appDeployDo) Omit(cols ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appDeployDo) Join(table schema.Tabler, on ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appDeployDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appDeployDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appDeployDo) Group(cols ...field.Expr) IAppDeployDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appDeployDo) Having(conds ...gen.Condition) IAppDeployDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appDeployDo) Limit(limit int) IAppDeployDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appDeployDo) Offset(offset int) IAppDeployDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appDeployDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppDeployDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appDeployDo) Unscoped() IAppDeployDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appDeployDo) Create(values ...*model.AppDeploy) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appDeployDo) CreateInBatches(values []*model.AppDeploy, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appDeployDo) Save(values ...*model.AppDeploy) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appDeployDo) First() (*model.AppDeploy, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDeploy), nil
	}
}

func (a appDeployDo) Take() (*model.AppDeploy, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDeploy), nil
	}
}

func (a appDeployDo) Last() (*model.AppDeploy, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDeploy), nil
	}
}

func (a appDeployDo) Find() ([]*model.AppDeploy, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppDeploy), err
}

func (a appDeployDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppDeploy, err error) {
	buf := make([]*model.AppDeploy, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appDeployDo) FindInBatches(result *[]*model.AppDeploy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appDeployDo) Attrs(attrs ...field.AssignExpr) IAppDeployDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appDeployDo) Assign(attrs ...field.AssignExpr) IAppDeployDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appDeployDo) Joins(fields ...field.RelationField) IAppDeployDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appDeployDo) Preload(fields ...field.RelationField) IAppDeployDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appDeployDo) FirstOrInit() (*model.AppDeploy, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDeploy), nil
	}
}

func (a appDeployDo) FirstOrCreate() (*model.AppDeploy, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDeploy), nil
	}
}

func (a appDeployDo) FindByPage(offset int, limit int) (result []*model.AppDeploy, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appDeployDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appDeployDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appDeployDo) Delete(models ...*model.AppDeploy) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appDeployDo) withDO(do gen.Dao) *appDeployDo {
	a.DO = *do.(*gen.DO)
	return a
}
