// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/CyrivlClth/kube-go/app/model"
)

func newEnvConfig(db *gorm.DB, opts ...gen.DOOption) envConfig {
	_envConfig := envConfig{}

	_envConfig.envConfigDo.UseDB(db, opts...)
	_envConfig.envConfigDo.UseModel(&model.EnvConfig{})

	tableName := _envConfig.envConfigDo.TableName()
	_envConfig.ALL = field.NewAsterisk(tableName)
	_envConfig.MaxCPUCount = field.NewInt(tableName, "max_cpu_count")
	_envConfig.MaxMemoryGB = field.NewInt(tableName, "max_memory_gb")
	_envConfig.Description = field.NewString(tableName, "description")
	_envConfig.PreCmd = field.NewField(tableName, "pre_cmd")
	_envConfig.Args = field.NewField(tableName, "args")
	_envConfig.PostCmd = field.NewField(tableName, "post_cmd")
	_envConfig.NodeSelector = field.NewField(tableName, "node_selector")
	_envConfig.Replicas = field.NewInt(tableName, "replicas")
	_envConfig.FileName = field.NewString(tableName, "file_name")
	_envConfig.Namespace = field.NewString(tableName, "namespace")
	_envConfig.OverrideNode = field.NewBool(tableName, "override_node")
	_envConfig.GatewayName = field.NewString(tableName, "gateway_name")
	_envConfig.GatewayNodePort = field.NewInt(tableName, "gateway_node_port")
	_envConfig.HostPort = field.NewInt(tableName, "host_port")
	_envConfig.EnvValues = field.NewField(tableName, "env_values")
	_envConfig.UserGuide = field.NewField(tableName, "user_guide")

	_envConfig.fillFieldMap()

	return _envConfig
}

type envConfig struct {
	envConfigDo

	ALL             field.Asterisk
	MaxCPUCount     field.Int
	MaxMemoryGB     field.Int
	Description     field.String
	PreCmd          field.Field
	Args            field.Field
	PostCmd         field.Field
	NodeSelector    field.Field
	Replicas        field.Int
	FileName        field.String
	Namespace       field.String
	OverrideNode    field.Bool
	GatewayName     field.String
	GatewayNodePort field.Int
	HostPort        field.Int
	EnvValues       field.Field
	UserGuide       field.Field

	fieldMap map[string]field.Expr
}

func (e envConfig) Table(newTableName string) *envConfig {
	e.envConfigDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e envConfig) As(alias string) *envConfig {
	e.envConfigDo.DO = *(e.envConfigDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *envConfig) updateTableName(table string) *envConfig {
	e.ALL = field.NewAsterisk(table)
	e.MaxCPUCount = field.NewInt(table, "max_cpu_count")
	e.MaxMemoryGB = field.NewInt(table, "max_memory_gb")
	e.Description = field.NewString(table, "description")
	e.PreCmd = field.NewField(table, "pre_cmd")
	e.Args = field.NewField(table, "args")
	e.PostCmd = field.NewField(table, "post_cmd")
	e.NodeSelector = field.NewField(table, "node_selector")
	e.Replicas = field.NewInt(table, "replicas")
	e.FileName = field.NewString(table, "file_name")
	e.Namespace = field.NewString(table, "namespace")
	e.OverrideNode = field.NewBool(table, "override_node")
	e.GatewayName = field.NewString(table, "gateway_name")
	e.GatewayNodePort = field.NewInt(table, "gateway_node_port")
	e.HostPort = field.NewInt(table, "host_port")
	e.EnvValues = field.NewField(table, "env_values")
	e.UserGuide = field.NewField(table, "user_guide")

	e.fillFieldMap()

	return e
}

func (e *envConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *envConfig) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 16)
	e.fieldMap["max_cpu_count"] = e.MaxCPUCount
	e.fieldMap["max_memory_gb"] = e.MaxMemoryGB
	e.fieldMap["description"] = e.Description
	e.fieldMap["pre_cmd"] = e.PreCmd
	e.fieldMap["args"] = e.Args
	e.fieldMap["post_cmd"] = e.PostCmd
	e.fieldMap["node_selector"] = e.NodeSelector
	e.fieldMap["replicas"] = e.Replicas
	e.fieldMap["file_name"] = e.FileName
	e.fieldMap["namespace"] = e.Namespace
	e.fieldMap["override_node"] = e.OverrideNode
	e.fieldMap["gateway_name"] = e.GatewayName
	e.fieldMap["gateway_node_port"] = e.GatewayNodePort
	e.fieldMap["host_port"] = e.HostPort
	e.fieldMap["env_values"] = e.EnvValues
	e.fieldMap["user_guide"] = e.UserGuide
}

func (e envConfig) clone(db *gorm.DB) envConfig {
	e.envConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e envConfig) replaceDB(db *gorm.DB) envConfig {
	e.envConfigDo.ReplaceDB(db)
	return e
}

type envConfigDo struct{ gen.DO }

type IEnvConfigDo interface {
	gen.SubQuery
	Debug() IEnvConfigDo
	WithContext(ctx context.Context) IEnvConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnvConfigDo
	WriteDB() IEnvConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnvConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnvConfigDo
	Not(conds ...gen.Condition) IEnvConfigDo
	Or(conds ...gen.Condition) IEnvConfigDo
	Select(conds ...field.Expr) IEnvConfigDo
	Where(conds ...gen.Condition) IEnvConfigDo
	Order(conds ...field.Expr) IEnvConfigDo
	Distinct(cols ...field.Expr) IEnvConfigDo
	Omit(cols ...field.Expr) IEnvConfigDo
	Join(table schema.Tabler, on ...field.Expr) IEnvConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnvConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnvConfigDo
	Group(cols ...field.Expr) IEnvConfigDo
	Having(conds ...gen.Condition) IEnvConfigDo
	Limit(limit int) IEnvConfigDo
	Offset(offset int) IEnvConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvConfigDo
	Unscoped() IEnvConfigDo
	Create(values ...*model.EnvConfig) error
	CreateInBatches(values []*model.EnvConfig, batchSize int) error
	Save(values ...*model.EnvConfig) error
	First() (*model.EnvConfig, error)
	Take() (*model.EnvConfig, error)
	Last() (*model.EnvConfig, error)
	Find() ([]*model.EnvConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvConfig, err error)
	FindInBatches(result *[]*model.EnvConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnvConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnvConfigDo
	Assign(attrs ...field.AssignExpr) IEnvConfigDo
	Joins(fields ...field.RelationField) IEnvConfigDo
	Preload(fields ...field.RelationField) IEnvConfigDo
	FirstOrInit() (*model.EnvConfig, error)
	FirstOrCreate() (*model.EnvConfig, error)
	FindByPage(offset int, limit int) (result []*model.EnvConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnvConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e envConfigDo) Debug() IEnvConfigDo {
	return e.withDO(e.DO.Debug())
}

func (e envConfigDo) WithContext(ctx context.Context) IEnvConfigDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e envConfigDo) ReadDB() IEnvConfigDo {
	return e.Clauses(dbresolver.Read)
}

func (e envConfigDo) WriteDB() IEnvConfigDo {
	return e.Clauses(dbresolver.Write)
}

func (e envConfigDo) Session(config *gorm.Session) IEnvConfigDo {
	return e.withDO(e.DO.Session(config))
}

func (e envConfigDo) Clauses(conds ...clause.Expression) IEnvConfigDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e envConfigDo) Returning(value interface{}, columns ...string) IEnvConfigDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e envConfigDo) Not(conds ...gen.Condition) IEnvConfigDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e envConfigDo) Or(conds ...gen.Condition) IEnvConfigDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e envConfigDo) Select(conds ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e envConfigDo) Where(conds ...gen.Condition) IEnvConfigDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e envConfigDo) Order(conds ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e envConfigDo) Distinct(cols ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e envConfigDo) Omit(cols ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e envConfigDo) Join(table schema.Tabler, on ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e envConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e envConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e envConfigDo) Group(cols ...field.Expr) IEnvConfigDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e envConfigDo) Having(conds ...gen.Condition) IEnvConfigDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e envConfigDo) Limit(limit int) IEnvConfigDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e envConfigDo) Offset(offset int) IEnvConfigDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e envConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvConfigDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e envConfigDo) Unscoped() IEnvConfigDo {
	return e.withDO(e.DO.Unscoped())
}

func (e envConfigDo) Create(values ...*model.EnvConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e envConfigDo) CreateInBatches(values []*model.EnvConfig, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e envConfigDo) Save(values ...*model.EnvConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e envConfigDo) First() (*model.EnvConfig, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvConfig), nil
	}
}

func (e envConfigDo) Take() (*model.EnvConfig, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvConfig), nil
	}
}

func (e envConfigDo) Last() (*model.EnvConfig, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvConfig), nil
	}
}

func (e envConfigDo) Find() ([]*model.EnvConfig, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnvConfig), err
}

func (e envConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvConfig, err error) {
	buf := make([]*model.EnvConfig, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e envConfigDo) FindInBatches(result *[]*model.EnvConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e envConfigDo) Attrs(attrs ...field.AssignExpr) IEnvConfigDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e envConfigDo) Assign(attrs ...field.AssignExpr) IEnvConfigDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e envConfigDo) Joins(fields ...field.RelationField) IEnvConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e envConfigDo) Preload(fields ...field.RelationField) IEnvConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e envConfigDo) FirstOrInit() (*model.EnvConfig, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvConfig), nil
	}
}

func (e envConfigDo) FirstOrCreate() (*model.EnvConfig, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvConfig), nil
	}
}

func (e envConfigDo) FindByPage(offset int, limit int) (result []*model.EnvConfig, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e envConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e envConfigDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e envConfigDo) Delete(models ...*model.EnvConfig) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *envConfigDo) withDO(do gen.Dao) *envConfigDo {
	e.DO = *do.(*gen.DO)
	return e
}
