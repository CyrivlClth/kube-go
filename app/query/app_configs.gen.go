// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/CyrivlClth/kube-go/app/model"
)

func newAppConfig(db *gorm.DB, opts ...gen.DOOption) appConfig {
	_appConfig := appConfig{}

	_appConfig.appConfigDo.UseDB(db, opts...)
	_appConfig.appConfigDo.UseModel(&model.AppConfig{})

	tableName := _appConfig.appConfigDo.TableName()
	_appConfig.ALL = field.NewAsterisk(tableName)
	_appConfig.MaxCPUCount = field.NewInt(tableName, "max_cpu_count")
	_appConfig.MaxMemoryGB = field.NewInt(tableName, "max_memory_gb")
	_appConfig.Description = field.NewString(tableName, "description")
	_appConfig.PreCmd = field.NewField(tableName, "pre_cmd")
	_appConfig.Args = field.NewField(tableName, "args")
	_appConfig.PostCmd = field.NewField(tableName, "post_cmd")
	_appConfig.NodeSelector = field.NewField(tableName, "node_selector")
	_appConfig.Replicas = field.NewInt(tableName, "replicas")
	_appConfig.Name = field.NewString(tableName, "name")
	_appConfig.Deploy = appConfigHasManyDeploy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Deploy", "model.AppDeploy"),
	}

	_appConfig.fillFieldMap()

	return _appConfig
}

type appConfig struct {
	appConfigDo

	ALL          field.Asterisk
	MaxCPUCount  field.Int
	MaxMemoryGB  field.Int
	Description  field.String
	PreCmd       field.Field
	Args         field.Field
	PostCmd      field.Field
	NodeSelector field.Field
	Replicas     field.Int
	Name         field.String
	Deploy       appConfigHasManyDeploy

	fieldMap map[string]field.Expr
}

func (a appConfig) Table(newTableName string) *appConfig {
	a.appConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appConfig) As(alias string) *appConfig {
	a.appConfigDo.DO = *(a.appConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appConfig) updateTableName(table string) *appConfig {
	a.ALL = field.NewAsterisk(table)
	a.MaxCPUCount = field.NewInt(table, "max_cpu_count")
	a.MaxMemoryGB = field.NewInt(table, "max_memory_gb")
	a.Description = field.NewString(table, "description")
	a.PreCmd = field.NewField(table, "pre_cmd")
	a.Args = field.NewField(table, "args")
	a.PostCmd = field.NewField(table, "post_cmd")
	a.NodeSelector = field.NewField(table, "node_selector")
	a.Replicas = field.NewInt(table, "replicas")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *appConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["max_cpu_count"] = a.MaxCPUCount
	a.fieldMap["max_memory_gb"] = a.MaxMemoryGB
	a.fieldMap["description"] = a.Description
	a.fieldMap["pre_cmd"] = a.PreCmd
	a.fieldMap["args"] = a.Args
	a.fieldMap["post_cmd"] = a.PostCmd
	a.fieldMap["node_selector"] = a.NodeSelector
	a.fieldMap["replicas"] = a.Replicas
	a.fieldMap["name"] = a.Name

}

func (a appConfig) clone(db *gorm.DB) appConfig {
	a.appConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appConfig) replaceDB(db *gorm.DB) appConfig {
	a.appConfigDo.ReplaceDB(db)
	return a
}

type appConfigHasManyDeploy struct {
	db *gorm.DB

	field.RelationField
}

func (a appConfigHasManyDeploy) Where(conds ...field.Expr) *appConfigHasManyDeploy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a appConfigHasManyDeploy) WithContext(ctx context.Context) *appConfigHasManyDeploy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a appConfigHasManyDeploy) Session(session *gorm.Session) *appConfigHasManyDeploy {
	a.db = a.db.Session(session)
	return &a
}

func (a appConfigHasManyDeploy) Model(m *model.AppConfig) *appConfigHasManyDeployTx {
	return &appConfigHasManyDeployTx{a.db.Model(m).Association(a.Name())}
}

type appConfigHasManyDeployTx struct{ tx *gorm.Association }

func (a appConfigHasManyDeployTx) Find() (result []*model.AppDeploy, err error) {
	return result, a.tx.Find(&result)
}

func (a appConfigHasManyDeployTx) Append(values ...*model.AppDeploy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a appConfigHasManyDeployTx) Replace(values ...*model.AppDeploy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a appConfigHasManyDeployTx) Delete(values ...*model.AppDeploy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a appConfigHasManyDeployTx) Clear() error {
	return a.tx.Clear()
}

func (a appConfigHasManyDeployTx) Count() int64 {
	return a.tx.Count()
}

type appConfigDo struct{ gen.DO }

type IAppConfigDo interface {
	gen.SubQuery
	Debug() IAppConfigDo
	WithContext(ctx context.Context) IAppConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppConfigDo
	WriteDB() IAppConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppConfigDo
	Not(conds ...gen.Condition) IAppConfigDo
	Or(conds ...gen.Condition) IAppConfigDo
	Select(conds ...field.Expr) IAppConfigDo
	Where(conds ...gen.Condition) IAppConfigDo
	Order(conds ...field.Expr) IAppConfigDo
	Distinct(cols ...field.Expr) IAppConfigDo
	Omit(cols ...field.Expr) IAppConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAppConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppConfigDo
	Group(cols ...field.Expr) IAppConfigDo
	Having(conds ...gen.Condition) IAppConfigDo
	Limit(limit int) IAppConfigDo
	Offset(offset int) IAppConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppConfigDo
	Unscoped() IAppConfigDo
	Create(values ...*model.AppConfig) error
	CreateInBatches(values []*model.AppConfig, batchSize int) error
	Save(values ...*model.AppConfig) error
	First() (*model.AppConfig, error)
	Take() (*model.AppConfig, error)
	Last() (*model.AppConfig, error)
	Find() ([]*model.AppConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppConfig, err error)
	FindInBatches(result *[]*model.AppConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppConfigDo
	Assign(attrs ...field.AssignExpr) IAppConfigDo
	Joins(fields ...field.RelationField) IAppConfigDo
	Preload(fields ...field.RelationField) IAppConfigDo
	FirstOrInit() (*model.AppConfig, error)
	FirstOrCreate() (*model.AppConfig, error)
	FindByPage(offset int, limit int) (result []*model.AppConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appConfigDo) Debug() IAppConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a appConfigDo) WithContext(ctx context.Context) IAppConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appConfigDo) ReadDB() IAppConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a appConfigDo) WriteDB() IAppConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a appConfigDo) Session(config *gorm.Session) IAppConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a appConfigDo) Clauses(conds ...clause.Expression) IAppConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appConfigDo) Returning(value interface{}, columns ...string) IAppConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appConfigDo) Not(conds ...gen.Condition) IAppConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appConfigDo) Or(conds ...gen.Condition) IAppConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appConfigDo) Select(conds ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appConfigDo) Where(conds ...gen.Condition) IAppConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appConfigDo) Order(conds ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appConfigDo) Distinct(cols ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appConfigDo) Omit(cols ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appConfigDo) Join(table schema.Tabler, on ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appConfigDo) Group(cols ...field.Expr) IAppConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appConfigDo) Having(conds ...gen.Condition) IAppConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appConfigDo) Limit(limit int) IAppConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appConfigDo) Offset(offset int) IAppConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appConfigDo) Unscoped() IAppConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appConfigDo) Create(values ...*model.AppConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appConfigDo) CreateInBatches(values []*model.AppConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appConfigDo) Save(values ...*model.AppConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appConfigDo) First() (*model.AppConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppConfig), nil
	}
}

func (a appConfigDo) Take() (*model.AppConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppConfig), nil
	}
}

func (a appConfigDo) Last() (*model.AppConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppConfig), nil
	}
}

func (a appConfigDo) Find() ([]*model.AppConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppConfig), err
}

func (a appConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppConfig, err error) {
	buf := make([]*model.AppConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appConfigDo) FindInBatches(result *[]*model.AppConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appConfigDo) Attrs(attrs ...field.AssignExpr) IAppConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appConfigDo) Assign(attrs ...field.AssignExpr) IAppConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appConfigDo) Joins(fields ...field.RelationField) IAppConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appConfigDo) Preload(fields ...field.RelationField) IAppConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appConfigDo) FirstOrInit() (*model.AppConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppConfig), nil
	}
}

func (a appConfigDo) FirstOrCreate() (*model.AppConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppConfig), nil
	}
}

func (a appConfigDo) FindByPage(offset int, limit int) (result []*model.AppConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appConfigDo) Delete(models ...*model.AppConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appConfigDo) withDO(do gen.Dao) *appConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
